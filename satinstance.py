class SATInstance:
    #we will be given a list of clauses
    #each clause is a list of literals
    #n total literals
    def __init__(self):
        self.comments = "c this was generated by satinstance.py \n"
        self.sat = None
        self.clauses = []
        self.assignment = []

    def __str__(self):
        if self.sat == True: return "satisfied"
        if self.sat == False: return "partial assignment led to unsat"
        output = self.comments
        output += f"p cnf {len(self.assignment)} {len(self.clauses)} \n"
        for clause in self.clauses:
            output += f"{" ".join(str(literal) for literal in clause)} 0 \n"
        output += "%\n0"
        return output
    
    def instance_from_file(cls, file):
        #construct instance
        instance = cls()
        #parse lines
        for line in file:
            line = line.strip()
            # print(line)
            #comments
            if line.startswith("c"): continue
            #info
            if line.startswith("p"):
                instance.assignment = [None] * int(line.split()[2])
                continue
            #end
            if line.startswith("%"): break
            #clauses
            instance.add_clause(line)
        return instance
    
    def add_clause(self, line):
        clause = []
        for literal in line.split():
            if literal == "0": break
            # encoded = int(literal) << 1 if not literal.startswith("-") else int(literal[1:]) << 1 ^ 1
            # clause.append(encoded)
            clause.append(int(literal))
        self.clauses.append(clause)

    def check(self, assignment):
        self.assignment = assignment.copy()
        new_clauses = []
        for clause in self.clauses:
            new_clause = SATInstance.check_clause(clause, assignment)
            if new_clause == True: continue
            elif new_clause == False:
                self.comments += "c current partial assignment caused unsat\n"
                self.sat = False
                return False
            else: new_clauses.append(new_clause)
        self.clauses = new_clauses
        if len(new_clauses) == 0:
            self.comments += "c current partial assignment caused sat\n"
            self.sat = True
            return True
        self.comments += "c +1 check done \n"
        return new_clauses
        

    def check_clause(clause, assignment):
        expression = False
        new_clause = []
        for literal in clause:
            if assignment[abs(literal)-1] == None:
                new_clause.append(literal)
                continue
            expression = expression or not assignment[abs(literal)-1] if literal < 0 else assignment[literal-1]
            if expression: return True
        if not expression and not new_clause: return False
        return new_clause